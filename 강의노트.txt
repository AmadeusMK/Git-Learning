

https://edu.goorm.io/learn/lecture/11528/git%EC%9C%BC%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%ED%98%91%EC%97%85-%EB%B0%8F-%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/lesson/463719/git-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%82%AC%EC%9A%A9%EB%B2%95-%EC%9D%B5-%EA%B8%B0

https://ndb796.tistory.com/184?category=1029186

#   1.  GitHub 에 로그인 후 repository 생성
#       AmadeusMK/Git-Learning 생성

#   2.  https://git-scm.com/download/win
#       윈도 설치파일 다운로드 후 설치

#   3. cmd 창에서 확인

#       버전확인

        git --version

#       전역설정 --global

#   3-1. 계정 설정

        git config --global user.name AmadeusMK

#   3-2. 이메일 설정

        git config --global user.email amadeusmk@gmail.com


#   4.  저장소로 사용할 폴더 생성

        mkdir d:\Git
        d:
        cd \Git

#   5.  GitHub 와 clone
#       D:\Git\Git-Learning 생성됨 ( 로컬 repository )

        git clone https://github.com/AmadeusMK/Git-Learning.git

#   6.  로컬 repository 에서 파일 생성

        cd Git-Learning

        D:\Git\Git-Learning\1강.txt

#   7.  파일 추가 및 commit
#       커밋시 메시지 추가 ( -m 옵션 )
#       로컬 repository 에만 적용 되며, 원격 repository 는 push 로 적용 함

        git add 1강.txt
        git commit -m "Add Text File[1강.txt]"

#   8.  원격 repository 에 push
#       ( 로그인 창이 팝업 될 수 있음 )

        git push


----------------------------------------------------------------------------------------------------


#   1.  다운로드 ( clone )

        git clone https://github.com/AmadeusMK/Git-Learning.git

#   ex) my_module.py 파일 추가한 후 진행

#   2.  변경 확인

        git status

#   3.  추가한 파일을 staging area 에 추가
#       ( staging area 에 있는 파일만 커밋 가능 )

        git add my_module.py

        or

        git add .       ( 모든 파일 추가 )


#       reset 명령으로 staging area 에서 제외 가능

        git reset my_module.py

#   4.  commit 및 push

        git commit -m "Add my_module.py [Add]"

        git push


#   5.  파일 수정 후 적용 
#       or checkout 은 이전 파일로 변경

        git status      ( 상태 확인 )

        git checkout -- my_module.py    ( 수정 취소 )

        git commit -m "Add my_module [Sub]"

#       커밋 메시지 수정

        git commit --amend 


----------------------------------------------------------------------------------------------------


#   1.  git clone 후 git pull


#   2.  파일 수정 및 push

        git add .                       수정내용을 Staging Aread 에 올림
        git commit -m "Rename File"     commit
        git status                      상태 확인

D:\Git\Git-Learning>git status
On branch master
Your branch is ahead of 'origin/master' by 1 commit.    <=  1개의 커밋이 발생했음
  (use "git push" to publish your local commits)        <=  아직 push 는 하지 않음

nothing to commit, working tree clean

        git push                        서버로 push


#   3.  이력 확인(log) 및 이전 지점으로 돌아감(reset)

        git log

            한 페이지가 넘을 경우
            스페이스 : 한 페이지 단위로 계속 조회
            p : 이전 페이지 
            q : 종료

commit ec6c5abc0fe7bd347d8b56d94ab05f6e7a743802         <=  
Author: AmadeusMK <amadeusmk@gmail.com>
Date:   Wed Dec 11 01:46:16 2019 +0900

    <EB><82><B4><EC><9A><A9> <EC><B6><94><EA><B0><80>   <=  커밋시에 붙인 메시지


        git reset --hard ec6c5abc0fe7bd347d8b56d94ab05f6e7a743802

            --hard 옵션 : 해당 커밋 지점으로 돌아가고, 나머지는 무시
            --soft / --mixed 옵션 존재

            로컬 저장소만 변경 되고, github 저장소는 변경되지 않음

        git push        <=  오류 발생 함

        git push -f     <=  강제로 push. github 저장소도 변경 됨

#   4.  commit 메시지 수정

        git commit --amend

            vi 에디트 실행 됨

        git status
        git log         <=  메시지 변경 확인

        git push -f     <=  오류가 나서... 강제로 커밋

        커밋 이후, 파일은 수정 했는데, 다시 커밋은 하지 않고, 
        메시지만 변경하고, push 함... 
        github 확인시 파일과 커밋메시지 내용이 맞지 않음...

        커밋 메시지를 다시 변경하고, 그대로 push -f 해서 파일 변경내용과 맞춤

        git commit --amend
        git push -f     <=  오류가 나서... 강제로 커밋

        이 후, 다시 add 및 commit 과 적당한 메시지 입력 후 push 함

        git add .
        git commit -m "Add my_module [Sun & Mul]"
        git push


----------------------------------------------------------------------------------------------------

#   브랜치

    통합 브랜치 : 프로젝트 생성시 기본적으로 master 브랜치가 생성
                  배포가 가능한 안정화 버전

    토픽 브랜치 : 특정 기능을 위해 만들어진 브랜치
                  Develop / Bug Fix branch


    1.  브랜치 확인. 

        git branch

            현재는 master 만 존재 ( "*" 표시 )

    2.  브랜치 생성. ex) develop 브랜치

        git branch develop

            develop 브랜치 생성 확인

        git branch

    3.  develop 브랜치로 헤더 이동

        git checkout develop

    4.  소스 수정 후 commit

        git add .
        git commit -m "Add function to my_module.py"

        git log

            브랜치로 커밋 확인

    5.  master 브랜치로 돌아가서 merge 함
        ( 로컬에서만 작업 )

        git checkout master

        git merge develop

            develop 브랜치를 master 에 merge

    6.  github 에 push 반영

        git push

    7.  develop 브랜치는 필요 없음으로 제거

        git branch -d develop

        git branch

            develop 브랜치가 삭제된것을 확인 함


----------------------------------------------------------------------------------------------------

#   conflict 처리

    1.  develop 브랜치 생성 및 헤더 이동

        git branch develop
        git checkout develop

        소스 수정 및 커밋

        git add .
        git commit -m "Add my_module.py [Div]"
        git log

        master 브랜치로 헤더 이동 후 같은 소스 다르게 수정 및 커밋

        git checkout master

        git add .
        git commit -m "Add my_module.py [Div] & Comment"
        git log

        각각의 브랜치에서 git log 확인시 로그가 서로 다름을 확인

    2.  master 브랜치에서 merge 실행시 conflict 발생 확인
        ( Automatic merge failed; ... )

        git merge develop

        충돌난 소스 확인시 HEAD (master) 와 develop 의 다른 부분 표시 됨
        필요한 부분 찾아서 수정 후 add 및 commit ( 병합이 완료 됨 )

        git add .
        git commit -m "Add my_module.py [Div] & Comment"

        git merge develop

            Already up to date. ( 이미 병합이 되었음을 표시 )

        git log

            master 와 develop 브랜치가 이력으로 남음

    3.  github 에 push 반영

        git push

    4.  develop 브랜치는 필요 없음으로 제거

        git branch -d develop

        git branch

            develop 브랜치가 삭제된것을 확인 함


----------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------
